name: Test Notebooks

on:
  # Run on the 1st of every month at midnight UTC
  schedule:
    - cron: '0 0 1 * *'
  
  # Allow manual trigger
  workflow_dispatch:
    inputs:
      notebook:
        description: 'Specific notebook to test (optional, leave empty for all)'
        required: false
        type: string

permissions:
  contents: read
  id-token: write  # Required for OIDC authentication with GCP

env:
  GCP_PROJECT_ID: open-targets-eu-dev
  GCP_REGION: europe-west1
  IMAGE_NAME: notebooks-test
  PYTHON_VERSION: '3.12'

jobs:
  test-notebooks-on-gcp:
    name: Execute Notebook Tests on GCP
    runs-on: ubuntu-latest
    timeout-minutes: 480  # Overall workflow timeout (GCP handles actual test execution)
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
          project_id: ${{ env.GCP_PROJECT_ID }}
      
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.GCP_PROJECT_ID }}
      
      - name: Configure Docker for GCP
        run: |
          gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev
      
      - name: Create Artifact Registry repository (if not exists)
        run: |
          gcloud artifacts repositories create notebooks \
            --repository-format=docker \
            --location=${{ env.GCP_REGION }} \
            --description="Notebook testing images" || echo "Repository already exists"
      
      - name: Build Docker image
        run: |
          docker build -t ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/notebooks/${{ env.IMAGE_NAME }}:${{ github.sha }} \
                       -t ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/notebooks/${{ env.IMAGE_NAME }}:latest \
                       -f Dockerfile .
      
      - name: Push Docker image to Artifact Registry
        run: |
          docker push ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/notebooks/${{ env.IMAGE_NAME }}:${{ github.sha }}
          docker push ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/notebooks/${{ env.IMAGE_NAME }}:latest
      
      - name: Run tests on Cloud Run Job
        id: run_tests
        run: |
          # Determine which notebooks to test
          if [ -n "${{ github.event.inputs.notebook }}" ]; then
            TEST_CMD="pytest tests/test_notebooks.py -v -k '${{ github.event.inputs.notebook }}' --junitxml=/tmp/test-results.xml"
          else
            TEST_CMD="pytest tests/ -v -m notebook --junitxml=/tmp/test-results.xml"
          fi
          
          # Create Cloud Run Job (or update if exists)
          JOB_NAME="notebook-test-${{ github.run_id }}"
          
          gcloud run jobs create $JOB_NAME \
            --image=${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/notebooks/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            --region=${{ env.GCP_REGION }} \
            --task-timeout=7200s \
            --max-retries=0 \
            --memory=8Gi \
            --cpu=4 \
            --set-env-vars="PYTHONUNBUFFERED=1" \
            --command="/bin/bash" \
            --args="-c","uv sync --all-extras && uv run $TEST_CMD; EXIT_CODE=\$?; echo 'Test exit code:' \$EXIT_CODE; exit \$EXIT_CODE" \
            || echo "Job might already exist, will update"
          
          # Execute the job and capture the execution name
          EXECUTION=$(gcloud run jobs execute $JOB_NAME \
            --region=${{ env.GCP_REGION }} \
            --format='value(metadata.name)')
          
          echo "Execution: $EXECUTION"
          
          # Wait for job completion and stream logs
          echo "Waiting for job to complete..."
          gcloud run jobs executions describe $EXECUTION \
            --region=${{ env.GCP_REGION }} \
            --format='value(status.completionTime)' \
            > /dev/null 2>&1 || true
          
          # Get logs
          echo "Fetching logs..."
          gcloud logging read "resource.type=cloud_run_job AND resource.labels.job_name=$JOB_NAME" \
            --limit=500 \
            --format="table(timestamp,textPayload)" \
            --project=${{ env.GCP_PROJECT_ID }}
          
          # Check job status
          STATUS=$(gcloud run jobs executions describe $EXECUTION \
            --region=${{ env.GCP_REGION }} \
            --format='value(status.conditions[0].type)')
          
          echo "Job status: $STATUS"
          
          # Clean up job
          gcloud run jobs delete $JOB_NAME --region=${{ env.GCP_REGION }} --quiet || true
          
          if [ "$STATUS" != "Completed" ]; then
            echo "::error::Job failed with status: $STATUS"
            exit 1
          fi
      
      - name: Upload test summary
        if: always()
        run: |
          echo "## Test Execution Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Run ID**: ${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Image**: ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/notebooks/${{ env.IMAGE_NAME }}:${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Region**: ${{ env.GCP_REGION }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Tests executed on GCP Cloud Run with 8GB RAM and 4 vCPUs." >> $GITHUB_STEP_SUMMARY
